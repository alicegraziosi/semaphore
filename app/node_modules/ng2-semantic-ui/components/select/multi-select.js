var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Directive, ViewChild, HostBinding, ElementRef, HostListener, forwardRef, TemplateRef, QueryList, ContentChildren, ViewChildren, EventEmitter } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SuiDropdownMenu } from "../dropdown/dropdown-menu";
import { SuiSelectOption } from "./select-option";
import { KeyCode } from '../../components/dropdown/dropdown.service';
import { SuiDropdownService } from "../dropdown/dropdown.service";
import { Input, Output } from "@angular/core";
import { SuiSearchService } from "../search/search.service";
import { SuiSelectMultiLabel } from "./multi-select-label";
export var SuiMultiSelect = (function () {
    function SuiMultiSelect(el) {
        var _this = this;
        this.el = el;
        this._dropdownService = new SuiDropdownService();
        this._searchService = new SuiSearchService();
        this.renderedOptionsSubscriptions = [];
        this.renderedSelectedOptionsSubscriptions = [];
        this.selectedOptions = [];
        this.maxSelectedReached = false;
        this.searchClasses = true;
        this.tabIndex = 0;
        this.isSearchable = false;
        this.placeholder = "Select...";
        this.selectedOptionsChange = new EventEmitter();
        this.onItemSelected = new EventEmitter();
        this._dropdownService.dropdownElement = el;
        this._dropdownService.autoClose = "outsideClick";
        this._dropdownService.itemClass = "item";
        this._dropdownService.itemSelectedClass = "selected";
        this._searchService.allowEmptyQuery = true;
        this._searchService.searchDelay = 0;
        this._dropdownService.isOpenChange
            .subscribe(function (isOpen) {
            if (isOpen) {
                if (_this.isSearchable && !_this._dropdownService.selectedItem) {
                    _this._dropdownService.selectNextItem();
                }
            }
        });
    }
    Object.defineProperty(SuiMultiSelect.prototype, "options", {
        get: function () {
            return this._searchService.options;
        },
        set: function (value) {
            var _this = this;
            this._searchService.options = value;
            if (this.options.length > 0 && this.selectedOptions) {
                this.selectedOptions = this.selectedOptions.map(function (so) {
                    if (!_this.options.find(function (o) { return o == so; })) {
                        return _this.options.find(function (o) { return so == _this._searchService.deepValue(o, _this.keyField); });
                    }
                    return so;
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "displayField", {
        get: function () {
            return this._searchService.optionsField;
        },
        set: function (value) {
            this._searchService.optionsField = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "query", {
        get: function () {
            return this._searchService.query;
        },
        set: function (value) {
            this._searchService.updateQuery(value);
            this.isOpen = true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "isActive", {
        get: function () {
            return this._dropdownService.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "isOpen", {
        get: function () {
            return this._dropdownService.isOpen;
        },
        set: function (value) {
            this._dropdownService.isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "isDisabled", {
        get: function () {
            return this._dropdownService.isDisabled;
        },
        set: function (value) {
            this._dropdownService.isDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "results", {
        get: function () {
            var _this = this;
            return this._searchService.results.filter(function (r) { return _this.selectedOptions.indexOf(r) == -1; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiMultiSelect.prototype, "availableOptions", {
        get: function () {
            return this.results;
        },
        enumerable: true,
        configurable: true
    });
    SuiMultiSelect.prototype.ngAfterContentInit = function () {
        var _this = this;
        //Initialise initial results
        this.renderedOptionsSubscribe();
        this.renderedOptions.changes.subscribe(function () { return _this.renderedOptionsSubscribe(); });
    };
    SuiMultiSelect.prototype.ngAfterViewInit = function () {
        var _this = this;
        this._dropdownMenu.service = this._dropdownService;
        this.renderedSelectedOptionsSubscribe();
        this.renderedSelectedOptions.changes.subscribe(function () { return _this.renderedSelectedOptionsSubscribe(); });
    };
    SuiMultiSelect.prototype.renderedOptionsSubscribe = function () {
        var _this = this;
        this.renderedOptionsSubscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.renderedOptionsSubscriptions = [];
        this.renderedOptions.forEach(function (option) {
            _this.renderedOptionsSubscriptions.push(option.selected.subscribe(function (value) {
                _this.selectOption(value);
            }));
            setTimeout(function () {
                option.useTemplate = !!_this.optionTemplate;
                option.readValue = function (v) { return _this._searchService.readValue(v); };
                if (option.useTemplate) {
                    option.viewContainerRef.clear();
                    option.viewContainerRef.createEmbeddedView(_this.optionTemplate, { option: option.value });
                }
            });
        });
    };
    SuiMultiSelect.prototype.renderedSelectedOptionsSubscribe = function () {
        var _this = this;
        this.renderedSelectedOptionsSubscriptions.forEach(function (s) { return s.unsubscribe(); });
        this.renderedSelectedOptionsSubscriptions = [];
        this.renderedSelectedOptions.forEach(function (label) {
            _this.renderedSelectedOptionsSubscriptions.push(label.selected.subscribe(function (value) {
                _this.deselectOption(value);
            }));
            setTimeout(function () {
                label.useTemplate = !!_this.optionTemplate;
                label.readValue = function (v) { return _this._searchService.readValue(v); };
                if (label.useTemplate) {
                    label.viewContainerRef.clear();
                    label.viewContainerRef.createEmbeddedView(_this.optionTemplate, { option: label.value });
                }
            });
        });
    };
    SuiMultiSelect.prototype.selectOption = function (option) {
        var _this = this;
        this.selectedOptions = this.selectedOptions || [];
        this.selectedOptions.push(option);
        this.selectedOptionsChange.emit(this.selectedOptions.map(function (so) { return _this._searchService.deepValue(so, _this.keyField); }));
        this.onItemSelected.emit(this._searchService.deepValue(option, this.keyField));
        this._searchService.updateQuery("");
    };
    SuiMultiSelect.prototype.deselectOption = function (option) {
        var _this = this;
        var index = this.selectedOptions.indexOf(option);
        this.selectedOptions.splice(index, 1);
        this.selectedOptionsChange.emit(this.selectedOptions.map(function (so) { return _this._searchService.deepValue(so, _this.keyField); }));
        this.focusFirstItem();
    };
    SuiMultiSelect.prototype.focusSearch = function () {
        if (this.isSearchable) {
            this._dropdownService.dropdownElement.nativeElement.querySelector("input").focus();
        }
    };
    SuiMultiSelect.prototype.focusFirstItem = function () {
        var _this = this;
        setTimeout(function () {
            _this._dropdownService.selectedItem = null;
            _this._dropdownService.selectNextItem();
        });
    };
    SuiMultiSelect.prototype.writeValue = function (value) {
        var _this = this;
        if (value) {
            this.selectedOptions = value;
            if (this.options.length > 0) {
                this.selectedOptions = this.selectedOptions.map(function (so) {
                    return _this.options.find(function (o) { return so == _this._searchService.deepValue(o, _this.keyField); });
                });
            }
        }
    };
    SuiMultiSelect.prototype.click = function (event) {
        event.stopPropagation();
        if (!this._dropdownService.menuElement.nativeElement.contains(event.target)) {
            if (!this.isOpen) {
                this.isOpen = true;
                this._searchService.search();
                this.focusSearch();
            }
            else if (event.target.tagName != "INPUT") {
                this.isOpen = false;
            }
        }
        return false;
    };
    SuiMultiSelect.prototype.keypress = function (event) {
        if ((event.which == KeyCode.Enter || event.which == KeyCode.Space) && !this.isOpen) {
            this.click(event);
            event.preventDefault();
        }
    };
    SuiMultiSelect.prototype.searchKeyDown = function (event) {
        if (event.which == KeyCode.Backspace && !this.query) {
            var selectedOptions = this.selectedOptions || [];
            var lastSelectedOption = selectedOptions[selectedOptions.length - 1];
            if (lastSelectedOption) {
                this.deselectOption(lastSelectedOption);
            }
        }
    };
    __decorate([
        ViewChild(SuiDropdownMenu), 
        __metadata('design:type', SuiDropdownMenu)
    ], SuiMultiSelect.prototype, "_dropdownMenu", void 0);
    __decorate([
        ContentChildren(SuiSelectOption), 
        __metadata('design:type', QueryList)
    ], SuiMultiSelect.prototype, "renderedOptions", void 0);
    __decorate([
        ViewChildren(SuiSelectMultiLabel), 
        __metadata('design:type', QueryList)
    ], SuiMultiSelect.prototype, "renderedSelectedOptions", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Number)
    ], SuiMultiSelect.prototype, "maxSelected", void 0);
    __decorate([
        HostBinding('class.ui'),
        HostBinding('class.multiple'),
        HostBinding('class.selection'),
        HostBinding('class.dropdown'), 
        __metadata('design:type', Object)
    ], SuiMultiSelect.prototype, "searchClasses", void 0);
    __decorate([
        HostBinding('attr.tabindex'), 
        __metadata('design:type', Object)
    ], SuiMultiSelect.prototype, "tabIndex", void 0);
    __decorate([
        HostBinding('class.search'),
        Input(), 
        __metadata('design:type', Boolean)
    ], SuiMultiSelect.prototype, "isSearchable", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], SuiMultiSelect.prototype, "placeholder", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Array)
    ], SuiMultiSelect.prototype, "options", null);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], SuiMultiSelect.prototype, "displayField", null);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], SuiMultiSelect.prototype, "keyField", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], SuiMultiSelect.prototype, "selectedOptionsChange", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], SuiMultiSelect.prototype, "onItemSelected", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', TemplateRef)
    ], SuiMultiSelect.prototype, "optionTemplate", void 0);
    __decorate([
        HostBinding('class.visible'), 
        __metadata('design:type', Object)
    ], SuiMultiSelect.prototype, "isActive", null);
    __decorate([
        HostBinding('class.active'), 
        __metadata('design:type', Boolean)
    ], SuiMultiSelect.prototype, "isOpen", null);
    __decorate([
        HostBinding('class.disabled'),
        Input(), 
        __metadata('design:type', Boolean)
    ], SuiMultiSelect.prototype, "isDisabled", null);
    __decorate([
        HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [MouseEvent]), 
        __metadata('design:returntype', Boolean)
    ], SuiMultiSelect.prototype, "click", null);
    __decorate([
        HostListener('keypress', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [KeyboardEvent]), 
        __metadata('design:returntype', void 0)
    ], SuiMultiSelect.prototype, "keypress", null);
    SuiMultiSelect = __decorate([
        Component({
            selector: 'sui-multi-select',
            exportAs: 'suiMultiSelect',
            template: "\n<i class=\"dropdown icon\"></i>\n<!-- Multi-select labels -->\n<sui-select-multi-label *ngFor=\"let selected of selectedOptions;\" [value]=\"selected\"></sui-select-multi-label>\n<!-- Search input box -->\n<input *ngIf=\"isSearchable\" class=\"search\" type=\"text\" autocomplete=\"off\" [(ngModel)]=\"query\" (keydown)=\"searchKeyDown($event)\">\n<!-- Single-select label -->\n<div *ngIf=\"!selectedOption\" class=\"default text\" [class.filtered]=\"query\">{{ placeholder }}</div>\n<!-- Select dropdown menu -->\n<div class=\"menu\" suiDropdownMenu>\n    <ng-content></ng-content>\n    <div *ngIf=\"!results.length && !maxSelectedReached\" class=\"message\">No Results</div>\n    <div *ngIf=\"!results.length && maxSelectedReached\" class=\"message\">Max {{ maxSelected }} selections</div>\n</div>\n",
            styles: ["\n:host input.search {\n    width: 12em !important;\n}\n.selected-results {\n    display: none;\n}\n"]
        }), 
        __metadata('design:paramtypes', [ElementRef])
    ], SuiMultiSelect);
    return SuiMultiSelect;
}());
export var CUSTOM_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SuiMultiSelectValueAccessor; }),
    multi: true
};
export var SuiMultiSelectValueAccessor = (function () {
    function SuiMultiSelectValueAccessor(host) {
        this.host = host;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    SuiMultiSelectValueAccessor.prototype.writeValue = function (value) {
        this.host.writeValue(value);
    };
    SuiMultiSelectValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    SuiMultiSelectValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SuiMultiSelectValueAccessor = __decorate([
        Directive({
            selector: 'sui-multi-select',
            host: { '(selectedOptionsChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [SuiMultiSelect])
    ], SuiMultiSelectValueAccessor);
    return SuiMultiSelectValueAccessor;
}());
//# sourceMappingURL=C:/Users/Edward/dev/ng2-semantic-ui/components/select/multi-select.js.map