var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Directive, HostListener, HostBinding, ElementRef, ViewChild, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SuiDropdownMenu } from "../dropdown/dropdown-menu";
import { Input, Output } from "@angular/core";
import { SuiSearchService } from "./search.service";
import { SuiDropdownService } from "../dropdown/dropdown.service";
export var SuiSearch = (function () {
    function SuiSearch(el) {
        var _this = this;
        this._dropdownService = new SuiDropdownService();
        this._searchService = new SuiSearchService();
        this.searchClasses = true;
        this.placeholder = "Search...";
        this.icon = true;
        this.selectedOptionChange = new EventEmitter();
        this.onItemSelected = new EventEmitter();
        this._dropdownService.dropdownElement = el;
        this._dropdownService.itemClass = "result";
        this._dropdownService.itemSelectedClass = "active";
        this._dropdownService.isOpenChange
            .subscribe(function (isOpen) {
            if (isOpen) {
                if (!_this._dropdownService.selectedItem) {
                    _this._dropdownService.selectNextItem();
                }
            }
        });
        this._searchService.onSearchCompleted
            .subscribe(function () {
            _this._dropdownService.isOpen = true;
        });
    }
    Object.defineProperty(SuiSearch.prototype, "searchDelay", {
        get: function () {
            return this._searchService.searchDelay;
        },
        set: function (value) {
            this._searchService.searchDelay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "optionsField", {
        get: function () {
            return this._searchService.optionsField;
        },
        set: function (value) {
            this._searchService.optionsField = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "loading", {
        get: function () {
            return this._searchService.loading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "isVisible", {
        get: function () {
            return this._dropdownService.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "isOpen", {
        get: function () {
            return this._dropdownService.isOpen;
        },
        set: function (value) {
            this._dropdownService.isOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "isDisabled", {
        get: function () {
            return this._dropdownService.isDisabled;
        },
        set: function (value) {
            this._dropdownService.isDisabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "options", {
        get: function () {
            return this._searchService.options;
        },
        set: function (value) {
            this._searchService.options = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "query", {
        get: function () {
            return this._searchService.query;
        },
        set: function (value) {
            this._searchService.updateQuery(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiSearch.prototype, "results", {
        get: function () {
            return this._searchService.results;
        },
        enumerable: true,
        configurable: true
    });
    SuiSearch.prototype.search = function () {
        this._searchService.search();
    };
    SuiSearch.prototype.result = function (i) {
        return this._searchService.readValue(this.results[i]);
    };
    SuiSearch.prototype.select = function (result) {
        this.selectedOption = result;
        this.selectedOptionChange.emit(result);
        this.onItemSelected.emit(result);
        this._searchService.updateQuery(this._searchService.readValue(result), false);
        this._dropdownService.isOpen = false;
    };
    SuiSearch.prototype.writeValue = function (value) {
        this.selectedOption = value;
        this._searchService.updateQuery(this._searchService.readValue(value), false);
    };
    SuiSearch.prototype.ngAfterViewInit = function () {
        this._dropdownMenu.service = this._dropdownService;
    };
    SuiSearch.prototype.click = function (event) {
        event.stopPropagation();
        if (!this._dropdownService.menuElement.nativeElement.contains(event.target)) {
            if (!this.isOpen && this.query) {
                if (this.results.length) {
                    this.isOpen = true;
                }
                this.search();
            }
        }
        return false;
    };
    __decorate([
        ViewChild(SuiDropdownMenu), 
        __metadata('design:type', SuiDropdownMenu)
    ], SuiSearch.prototype, "_dropdownMenu", void 0);
    __decorate([
        HostBinding('class.ui'),
        HostBinding('class.search'), 
        __metadata('design:type', Object)
    ], SuiSearch.prototype, "searchClasses", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', String)
    ], SuiSearch.prototype, "placeholder", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], SuiSearch.prototype, "searchDelay", null);
    __decorate([
        Input(), 
        __metadata('design:type', Boolean)
    ], SuiSearch.prototype, "icon", void 0);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], SuiSearch.prototype, "optionsField", null);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], SuiSearch.prototype, "selectedOptionChange", void 0);
    __decorate([
        Output(), 
        __metadata('design:type', EventEmitter)
    ], SuiSearch.prototype, "onItemSelected", void 0);
    __decorate([
        HostBinding('class.loading'), 
        __metadata('design:type', Object)
    ], SuiSearch.prototype, "loading", null);
    __decorate([
        HostBinding('class.visible'), 
        __metadata('design:type', Object)
    ], SuiSearch.prototype, "isVisible", null);
    __decorate([
        HostBinding('class.active'),
        Input(), 
        __metadata('design:type', Boolean)
    ], SuiSearch.prototype, "isOpen", null);
    __decorate([
        HostBinding('class.disabled'),
        Input(), 
        __metadata('design:type', Boolean)
    ], SuiSearch.prototype, "isDisabled", null);
    __decorate([
        Input(), 
        __metadata('design:type', Object)
    ], SuiSearch.prototype, "options", null);
    __decorate([
        HostListener('click', ['$event']), 
        __metadata('design:type', Function), 
        __metadata('design:paramtypes', [MouseEvent]), 
        __metadata('design:returntype', Boolean)
    ], SuiSearch.prototype, "click", null);
    SuiSearch = __decorate([
        Component({
            selector: 'sui-search',
            exportAs: 'suiSearch',
            template: "\n<div class=\"ui icon input\">\n    <input class=\"prompt\" type=\"text\" [attr.placeholder]=\"placeholder\" autocomplete=\"off\" [(ngModel)]=\"query\">\n    <i *ngIf=\"icon\" class=\"search icon\"></i>\n  </div>\n<div class=\"results\" suiDropdownMenu>\n    <a class=\"result\" *ngFor=\"let r of results; let i = index\" (click)=\"select(r)\">\n        <div class=\"title\">{{ result(i) }}</div>\n    </a>\n    <div *ngIf=\"!results.length\" class=\"message empty\">\n        <div class=\"header\">No Results</div>\n        <div class=\"description\">Your search returned no results.</div>\n    </div>\n</div>\n"
        }), 
        __metadata('design:paramtypes', [ElementRef])
    ], SuiSearch);
    return SuiSearch;
}());
export var CUSTOM_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SuiSearchValueAccessor; }),
    multi: true
};
export var SuiSearchValueAccessor = (function () {
    function SuiSearchValueAccessor(host) {
        this.host = host;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    SuiSearchValueAccessor.prototype.writeValue = function (value) {
        this.host.writeValue(value);
    };
    SuiSearchValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    SuiSearchValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SuiSearchValueAccessor = __decorate([
        Directive({
            selector: 'sui-search',
            host: { '(selectedOptionChange)': 'onChange($event)' },
            providers: [CUSTOM_VALUE_ACCESSOR]
        }), 
        __metadata('design:paramtypes', [SuiSearch])
    ], SuiSearchValueAccessor);
    return SuiSearchValueAccessor;
}());
export var SUI_SEARCH_DIRECTIVES = [SuiSearch, SuiSearchValueAccessor];
//# sourceMappingURL=C:/Users/Edward/dev/ng2-semantic-ui/components/search/search.js.map